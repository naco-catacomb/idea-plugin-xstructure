This page aims to help you to write mapping definition files. They are really simple to create and test.

= Example =
Following file is a simple mapping definition file :

{{{
<?xml version="1.0" encoding="UTF-8"?>
<xstructure xmlns="http://plugins.intellij.net/xstructure"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://plugins.intellij.net/xstructure http://plugins.intellij.net/xstructure/ns/xstructure_1_0.xsd"
            implType="default" name="Wiki test" version="1.1" priority="10">
  <supported-schemas>
    <schema uri="http://www.sample.org/model/wiki_test_1_0.xsd"/>
    <schema uri="http://www.sample.org/model/wiki_test_1_1.dtd"/>
  </supported-schemas>
  <mappings defaultSkip="none">
    <mapping match="/beans" label="{display-name}-{@version}" tip="{description}"/>
    <mapping match="/beans/description" skip="all"/>
    <mapping match="/beans/bean" label="{@id}" tip="{description}"/>
    <mapping match="/.*/property" label="{@name}"/>
    <mapping match="/.*/property/(list|map)" skip="this"/>
    <mapping match="/.*/property/list/value" label="{.}"/>
    <mapping match="/.*/property/map/entry" label="{@key}={value}" skip="children"/>
  </mappings>
</xstructure>
}}}

Get the idea ? You specify which schemas/DTD your mappings target, and then you define nodes you'd like to see inside structure view and how they should be displayed.

Format is simple, and editing is even simplier since an XML Schema is provided to allow completion inside IDEA. This schema is explained below.

= Mapping definition file schema =

  * `xstructure`
    * _Content_ : container for supported schemas and mapping definitions
    * _Attributes_ :
      * `name` : a logical name to identify this file. It will be display so user may choose a mapping definition file when several are available.
      * `version` : release number for this definition file. Mappings definition files are versionned since mappings or supported schemas may be updated.
      * `priority` : useful when several mapping definition files are available for the same file. They will be sorted by priority, and mappings with lowest priority will be selected by default
      * `implType` : implementation type. xStructure supports different implementations to resolve nodes. Recommended implementation is `default`, which is based on regular expressions. You could also used `xpath` implementation which provides more flexibility but is slower. See ImplementationTypes page for more details about implementation types.

 * `supported-schemas`
    * _Content_ : container for supported schemas. May contain multiple schema nodes

 * `schema`
    * _Attributes_ :
      * `uri` : URI of any supported schema. This may be a DTD location or an XML Schema location.

 * `mappings`
    * _Content_ : container for mapping definitions
    * _Attributes_ :
      * `defaultSkip` : specify default skip mode for nodes. When a node is not matched by any mappings, this settings define if it should be displayed or not. This value is overriden by _skip_ attribute of mappings. See this attribute for accepted values

 * `mapping`
    * _Attributes_ :
      * `match` : path used to identify which nodes are concerned by this mapping. Path format depends on implementation type. See ImplementationTypes page for more details about implementation types.
      * `label` : defines how matched nodes should be displayed. This expression is based on node context and typically uses children nodes text or attributes values. If not specified and skip mode is set to `none`, tag name will be used. Expression format depends on implementation type.
      * `tip` : defines optional tooltip for matched nodes. This expression is based on node context and typically uses children nodes text or attributes values. Expression format depends on implementation type.
      * `skip` : specify skip mode for matched nodes, overriding optional _defaultSkip_ attribute of _mappings_ element. Skip mode allows to hide some nodes which don't provide relevant information.
      
      Accepted values for `skip`/`defaultSkip` attributes are :
        * _none_ : node is displayed using its _label_ expression (default value)
        * _this_ : node is hidden but its children are displayed by default (according to their mappings). This allows to skip container elements.
        * _children_ : node is displayed buts its children are hidden by default (according to their mappings)
        * _all_ : node and its children are hidden (recursively)

= Tips =      